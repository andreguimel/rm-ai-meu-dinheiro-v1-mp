#!/bin/bash

echo "=========================================="
echo "üê≥ DIAGN√ìSTICO STACK DOCKER VPS"
echo "=========================================="
echo ""

# Informa√ß√µes b√°sicas do sistema host
echo "üñ•Ô∏è SISTEMA HOST:"
echo "----------------------------------------"
echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2 2>/dev/null || uname -s)"
echo "Kernel: $(uname -r)"
echo "Arquitetura: $(arch)"
echo ""

# Docker Engine
echo "üê≥ DOCKER ENGINE:"
echo "----------------------------------------"
if command -v docker &> /dev/null; then
    echo "‚úÖ Docker instalado"
    docker --version
    echo ""
    echo "Docker Info:"
    docker info | grep -E "Server Version|Storage Driver|Logging Driver|Cgroup Driver|Docker Root Dir"
    echo ""
else
    echo "‚ùå Docker n√£o instalado"
    exit 1
fi

# Docker Compose
echo "üîß DOCKER COMPOSE:"
echo "----------------------------------------"
if command -v docker-compose &> /dev/null; then
    echo "‚úÖ Docker Compose instalado"
    docker-compose --version
elif docker compose version &> /dev/null; then
    echo "‚úÖ Docker Compose (plugin) instalado"
    docker compose version
else
    echo "‚ùå Docker Compose n√£o encontrado"
fi
echo ""

# Containers em execu√ß√£o
echo "üì¶ CONTAINERS EM EXECU√á√ÉO:"
echo "----------------------------------------"
docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
echo ""

# Todos os containers (incluindo parados)
echo "üìã TODOS OS CONTAINERS:"
echo "----------------------------------------"
docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.CreatedAt}}"
echo ""

# Imagens Docker
echo "üñºÔ∏è IMAGENS DOCKER:"
echo "----------------------------------------"
docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
echo ""

# Volumes Docker
echo "üíæ VOLUMES DOCKER:"
echo "----------------------------------------"
docker volume ls
echo ""
echo "Detalhes dos volumes:"
for volume in $(docker volume ls -q); do
    echo "üìÅ Volume: $volume"
    docker volume inspect $volume | grep -E "Mountpoint|Driver"
    echo ""
done

# Networks Docker
echo "üåê REDES DOCKER:"
echo "----------------------------------------"
docker network ls
echo ""

# Verificar se existe docker-compose.yml
echo "üìÑ ARQUIVOS DE CONFIGURA√á√ÉO:"
echo "----------------------------------------"
if [ -f "docker-compose.yml" ]; then
    echo "‚úÖ docker-compose.yml encontrado"
    echo "Servi√ßos definidos:"
    docker-compose config --services 2>/dev/null || docker compose config --services 2>/dev/null
    echo ""
    echo "Configura√ß√£o dos servi√ßos:"
    docker-compose config 2>/dev/null || docker compose config 2>/dev/null | head -50
elif [ -f "docker-compose.yaml" ]; then
    echo "‚úÖ docker-compose.yaml encontrado"
    echo "Servi√ßos definidos:"
    docker-compose config --services 2>/dev/null || docker compose config --services 2>/dev/null
else
    echo "‚ùå Arquivo docker-compose.yml n√£o encontrado no diret√≥rio atual"
fi
echo ""

# Dockerfile
if [ -f "Dockerfile" ]; then
    echo "‚úÖ Dockerfile encontrado"
    echo "Primeiras linhas do Dockerfile:"
    head -20 Dockerfile
else
    echo "‚ùå Dockerfile n√£o encontrado no diret√≥rio atual"
fi
echo ""

# Logs dos containers principais
echo "üìù LOGS DOS CONTAINERS (√∫ltimas 20 linhas):"
echo "----------------------------------------"
for container in $(docker ps --format "{{.Names}}"); do
    echo "üîç Logs do container: $container"
    docker logs --tail 20 $container 2>/dev/null || echo "Erro ao acessar logs"
    echo "---"
done
echo ""

# Recursos utilizados pelos containers
echo "üìä RECURSOS DOS CONTAINERS:"
echo "----------------------------------------"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
echo ""

# Portas expostas
echo "üîå PORTAS EXPOSTAS:"
echo "----------------------------------------"
echo "Mapeamento de portas dos containers:"
docker ps --format "table {{.Names}}\t{{.Ports}}"
echo ""

# Verificar conectividade entre containers
echo "üîó CONECTIVIDADE:"
echo "----------------------------------------"
echo "Redes dos containers:"
for container in $(docker ps --format "{{.Names}}"); do
    echo "Container: $container"
    docker inspect $container | grep -A 10 '"Networks"' | head -15
    echo "---"
done
echo ""

# Vari√°veis de ambiente dos containers
echo "üîß VARI√ÅVEIS DE AMBIENTE (principais):"
echo "----------------------------------------"
for container in $(docker ps --format "{{.Names}}"); do
    echo "Container: $container"
    docker exec $container env 2>/dev/null | grep -E "(NODE_ENV|PORT|DATABASE|SUPABASE|API)" | head -10 || echo "N√£o foi poss√≠vel acessar vari√°veis"
    echo "---"
done
echo ""

# Verificar sa√∫de dos containers
echo "üè• SA√öDE DOS CONTAINERS:"
echo "----------------------------------------"
for container in $(docker ps --format "{{.Names}}"); do
    echo "Container: $container"
    health=$(docker inspect $container | grep '"Health"' -A 20 | grep '"Status"' | cut -d'"' -f4 2>/dev/null)
    if [ ! -z "$health" ]; then
        echo "Status de sa√∫de: $health"
    else
        echo "Health check n√£o configurado"
    fi
    echo "---"
done
echo ""

# Espa√ßo em disco usado pelo Docker
echo "üíΩ USO DE DISCO DOCKER:"
echo "----------------------------------------"
docker system df
echo ""

# Processos dentro dos containers
echo "‚öôÔ∏è PROCESSOS NOS CONTAINERS:"
echo "----------------------------------------"
for container in $(docker ps --format "{{.Names}}"); do
    echo "Processos no container: $container"
    docker exec $container ps aux 2>/dev/null | head -10 || echo "N√£o foi poss√≠vel listar processos"
    echo "---"
done
echo ""

# Verificar se h√° proxy reverso
echo "üîÑ PROXY REVERSO:"
echo "----------------------------------------"
nginx_container=$(docker ps --format "{{.Names}}" | grep -i nginx | head -1)
traefik_container=$(docker ps --format "{{.Names}}" | grep -i traefik | head -1)

if [ ! -z "$nginx_container" ]; then
    echo "‚úÖ Container Nginx encontrado: $nginx_container"
    docker exec $nginx_container nginx -v 2>/dev/null || echo "Erro ao verificar vers√£o"
elif [ ! -z "$traefik_container" ]; then
    echo "‚úÖ Container Traefik encontrado: $traefik_container"
    docker exec $traefik_container traefik version 2>/dev/null || echo "Erro ao verificar vers√£o"
else
    echo "‚ùå Proxy reverso n√£o identificado nos containers"
fi
echo ""

# Resumo da stack identificada
echo "üìã RESUMO DA STACK IDENTIFICADA:"
echo "----------------------------------------"
echo "üê≥ Containers ativos: $(docker ps --format "{{.Names}}" | wc -l)"
echo "üñºÔ∏è Imagens: $(docker images -q | wc -l)"
echo "üíæ Volumes: $(docker volume ls -q | wc -l)"
echo "üåê Redes: $(docker network ls -q | wc -l)"
echo ""

# Tecnologias identificadas nos containers
echo "üîç TECNOLOGIAS IDENTIFICADAS:"
echo "----------------------------------------"
for container in $(docker ps --format "{{.Names}}"); do
    image=$(docker ps --filter "name=$container" --format "{{.Image}}")
    echo "Container: $container (Imagem: $image)"
    
    # Tentar identificar a tecnologia pela imagem
    case $image in
        *node*|*nodejs*)
            echo "  üì¶ Node.js detectado"
            docker exec $container node --version 2>/dev/null || echo "  Vers√£o n√£o dispon√≠vel"
            ;;
        *nginx*)
            echo "  üåê Nginx detectado"
            docker exec $container nginx -v 2>/dev/null || echo "  Vers√£o n√£o dispon√≠vel"
            ;;
        *postgres*)
            echo "  üóÑÔ∏è PostgreSQL detectado"
            docker exec $container psql --version 2>/dev/null || echo "  Vers√£o n√£o dispon√≠vel"
            ;;
        *redis*)
            echo "  üî¥ Redis detectado"
            docker exec $container redis-server --version 2>/dev/null || echo "  Vers√£o n√£o dispon√≠vel"
            ;;
        *mysql*)
            echo "  üê¨ MySQL detectado"
            docker exec $container mysql --version 2>/dev/null || echo "  Vers√£o n√£o dispon√≠vel"
            ;;
        *)
            echo "  üîç Tecnologia: $(echo $image | cut -d':' -f1)"
            ;;
    esac
    echo ""
done

echo "=========================================="
echo "‚úÖ DIAGN√ìSTICO DOCKER CONCLU√çDO"
echo "=========================================="