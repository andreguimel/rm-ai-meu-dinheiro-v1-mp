#!/bin/bash
# Script para resolver conflito de container Docker
# Uso: ./resolver-conflito.sh

set -e

echo "üîß RESOLVENDO CONFLITO DE CONTAINER DOCKER"
echo "==========================================="

# Fun√ß√£o para log colorido
log_info() {
    echo -e "\033[34m‚ÑπÔ∏è  $1\033[0m"
}

log_success() {
    echo -e "\033[32m‚úÖ $1\033[0m"
}

log_warning() {
    echo -e "\033[33m‚ö†Ô∏è  $1\033[0m"
}

log_error() {
    echo -e "\033[31m‚ùå $1\033[0m"
}

# Verificar se Docker est√° rodando
if ! docker info >/dev/null 2>&1; then
    log_error "Docker n√£o est√° rodando!"
    exit 1
fi

log_info "Verificando containers existentes..."
docker ps -a | grep app-app || log_warning "Nenhum container app-app encontrado"

# Parar container se estiver rodando
log_info "Parando container app-app..."
if docker stop app-app 2>/dev/null; then
    log_success "Container app-app parado"
else
    log_warning "Container app-app j√° estava parado ou n√£o existe"
fi

# Remover container
log_info "Removendo container app-app..."
if docker rm app-app 2>/dev/null; then
    log_success "Container app-app removido"
else
    log_warning "Container app-app j√° estava removido ou n√£o existe"
fi

# Verificar se imagem existe
log_info "Verificando imagem app-app:latest..."
if ! docker images | grep -q "app-app.*latest"; then
    log_error "Imagem app-app:latest n√£o encontrada!"
    log_info "Construindo imagem..."
    if [ -f "Dockerfile" ]; then
        docker build -t app-app:latest .
        log_success "Imagem constru√≠da"
    else
        log_error "Dockerfile n√£o encontrado!"
        exit 1
    fi
fi

# Verificar rede Traefik
log_info "Verificando rede traefik-network..."
if ! docker network ls | grep -q traefik-network; then
    log_warning "Rede traefik-network n√£o existe, criando..."
    docker network create traefik-network
    log_success "Rede traefik-network criada"
fi

# Iniciar novo container
log_info "Iniciando novo container app-app..."
docker run -d --name app-app \
  --network traefik-network \
  --label "traefik.enable=true" \
  --label "traefik.http.routers.app.rule=Host(\`mdinheiro.com.br\`)" \
  --label "traefik.http.routers.app.tls=true" \
  --label "traefik.http.routers.app.tls.certresolver=letsencrypt" \
  --label "traefik.http.services.app.loadbalancer.server.port=80" \
  app-app:latest

if [ $? -eq 0 ]; then
    log_success "Container app-app iniciado com sucesso!"
else
    log_error "Falha ao iniciar container app-app"
    exit 1
fi

# Aguardar container inicializar
log_info "Aguardando container inicializar..."
sleep 5

# Verificar status
log_info "Verificando status do container..."
if docker ps | grep -q app-app; then
    log_success "Container app-app est√° rodando!"
    docker ps | grep app-app
else
    log_error "Container app-app n√£o est√° rodando!"
    log_info "Logs do container:"
    docker logs app-app
    exit 1
fi

# Verificar logs iniciais
log_info "Logs iniciais do container:"
docker logs --tail 10 app-app

# Testar conectividade
log_info "Testando conectividade..."
if curl -s -I https://mdinheiro.com.br | head -1 | grep -q "200\|301\|302"; then
    log_success "Aplica√ß√£o est√° respondendo!"
else
    log_warning "Aplica√ß√£o pode n√£o estar respondendo ainda (normal nos primeiros segundos)"
fi

# Verificar containers ativos
log_info "Containers ativos:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
log_success "RESOLU√á√ÉO CONCLU√çDA!"
echo "=================="
log_info "Pr√≥ximos passos:"
echo "1. Aguarde 30-60 segundos para aplica√ß√£o inicializar completamente"
echo "2. Teste no navegador: https://mdinheiro.com.br"
echo "3. Teste no iPhone Safari para verificar tela branca"
echo "4. Monitore logs: docker logs -f app-app"
echo ""
log_info "Para monitoramento cont√≠nuo:"
echo "watch 'docker ps | grep app'"
echo "docker logs -f app-app"