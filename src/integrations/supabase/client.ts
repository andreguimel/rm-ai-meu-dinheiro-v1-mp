// This file is automatically generated. Do not edit it directly.
import { createClient, SupabaseClient } from "@supabase/supabase-js";

const SUPABASE_URL =
  import.meta.env.VITE_SUPABASE_URL ||
  "https://ponxumxwjodpgwhepwxc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY =
  import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY ||
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBvbnh1bXh3am9kcGd3aGVwd3hjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0NTE4NTIsImV4cCI6MjA3MTAyNzg1Mn0.J43LGwbU8tQ8_xe3ua4ddb-HTFLsWXoR7R1MVIS3SdE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// iOS Safari localStorage compatibility fix
function createSafeStorage() {
  try {
    // Test if localStorage is available and working
    const testKey = "__supabase_test__";
    localStorage.setItem(testKey, "test");
    localStorage.removeItem(testKey);
    return localStorage;
  } catch (error) {
    console.warn(
      "localStorage not available, using memory storage for iOS Safari compatibility"
    );
    // Fallback to memory storage for iOS Safari private mode
    const memoryStorage: Storage = {
      length: 0,
      clear: () => {},
      getItem: (key: string) => null,
      key: (index: number) => null,
      removeItem: (key: string) => {},
      setItem: (key: string, value: string) => {},
    };
    return memoryStorage;
  }
}

// Singleton pattern para prevenir múltiplas instâncias
let supabaseInstance: SupabaseClient | null = null;

const createSupabaseClient = (): SupabaseClient => {
  if (supabaseInstance) {
    console.log('🔄 Reutilizando instância existente do Supabase');
    return supabaseInstance;
  }

  console.log('🆕 Criando nova instância do Supabase');
  supabaseInstance = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: createSafeStorage(),
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: "pkce",
    },
  });

  // Marcar instância globalmente para debug
  if (typeof window !== 'undefined') {
    (window as any).__supabase_client_created = true;
  }

  return supabaseInstance;
};

export const supabase = createSupabaseClient();

// Type definitions for database tables (temporary until types.ts is regenerated)
export type Database = {
  public: {
    Tables: {
      [key: string]: {
        Row: Record<string, any>;
        Insert: Record<string, any>;
        Update: Record<string, any>;
      };
    };
    Views: Record<string, any>;
    Functions: Record<string, any>;
    Enums: Record<string, any>;
    CompositeTypes: Record<string, any>;
  };
};
