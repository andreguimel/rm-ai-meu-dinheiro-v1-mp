// This file is automatically generated. Do not edit it directly.
import { createClient, SupabaseClient } from "@supabase/supabase-js";

const SUPABASE_URL =
  import.meta.env.VITE_SUPABASE_URL ||
  "https://ponxumxwjodpgwhepwxc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY =
  import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY ||
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBvbnh1bXh3am9kcGd3aGVwd3hjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0NTE4NTIsImV4cCI6MjA3MTAyNzg1Mn0.J43LGwbU8tQ8_xe3ua4ddb-HTFLsWXoR7R1MVIS3SdE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Detectar iOS/Safari
const isIOS = () => {
  if (typeof window === 'undefined') return false;
  return /iPad|iPhone|iPod/.test(navigator.userAgent) || 
         (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome'));
};

// Detectar modo privado no Safari
const isPrivateMode = async (): Promise<boolean> => {
  if (typeof window === 'undefined') return false;
  
  try {
    const testKey = '__private_mode_test__';
    localStorage.setItem(testKey, 'test');
    localStorage.removeItem(testKey);
    return false;
  } catch (e) {
    return true;
  }
};

// Função para criar armazenamento seguro compatível com iOS Safari
const createSafeStorage = () => {
  // Verificar se estamos no navegador
  if (typeof window === 'undefined') {
    return {
      getItem: () => null,
      setItem: () => {},
      removeItem: () => {},
      clear: () => {}
    };
  }

  // Para iOS, usar armazenamento específico
  if (isIOS()) {
    console.log('🍎 Detectado iOS - usando armazenamento otimizado');
    
    // Verificar modo privado
    try {
      const testKey = '__private_mode_test__';
      localStorage.setItem(testKey, 'test');
      localStorage.removeItem(testKey);
      
      // localStorage disponível
      return {
        getItem: (key: string) => localStorage.getItem(key),
        setItem: (key: string, value: string) => localStorage.setItem(key, value),
        removeItem: (key: string) => localStorage.removeItem(key),
        clear: () => localStorage.clear()
      };
    } catch (e) {
      console.log('🔒 Modo privado detectado - usando memory storage');
      // Memory storage para modo privado
      const memoryStorage: { [key: string]: string } = {};
      
      return {
        getItem: (key: string) => memoryStorage[key] || null,
        setItem: (key: string, value: string) => { memoryStorage[key] = value; },
        removeItem: (key: string) => { delete memoryStorage[key]; },
        clear: () => { Object.keys(memoryStorage).forEach(key => delete memoryStorage[key]); }
      };
    }
  }

  // Para outros navegadores, tentar usar localStorage com fallback
  try {
    const testKey = '__storage_test__';
    localStorage.setItem(testKey, 'test');
    localStorage.removeItem(testKey);
    return localStorage;
  } catch (e) {
    console.warn('localStorage não disponível, usando sessionStorage');
    try {
      return sessionStorage;
    } catch (e2) {
      console.warn('sessionStorage não disponível, usando memory storage');
      const memoryStorage: { [key: string]: string } = {};
      return {
        getItem: (key: string) => memoryStorage[key] || null,
        setItem: (key: string, value: string) => { memoryStorage[key] = value; },
        removeItem: (key: string) => { delete memoryStorage[key]; },
        clear: () => { Object.keys(memoryStorage).forEach(key => delete memoryStorage[key]); }
      };
    }
  }
};

// Singleton pattern para prevenir múltiplas instâncias
let supabaseInstance: SupabaseClient | null = null;

const createSupabaseClient = (): SupabaseClient => {
  if (supabaseInstance) {
    console.log('🔄 Reutilizando instância existente do Supabase');
    return supabaseInstance;
  }

  console.log('🆕 Criando nova instância do Supabase');
  
  // Configurações específicas para iOS
  const iosConfig = isIOS() ? {
    realtime: {
      params: {
        eventsPerSecond: 2
      }
    },
    auth: {
      storage: createSafeStorage(),
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: false, // Desabilitar para iOS
      flowType: "pkce" as const,
    },
  } : {
    auth: {
      storage: createSafeStorage(),
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: "pkce" as const,
    },
  };

  supabaseInstance = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, iosConfig);

  // Marcar instância globalmente para debug
  if (typeof window !== 'undefined') {
    (window as any).__supabase_client_created = true;
    (window as any).__supabase_client_platform = isIOS() ? 'iOS' : 'standard';
  }

  return supabaseInstance;
};

export const supabase = createSupabaseClient();

// Type definitions for database tables (temporary until types.ts is regenerated)
export type Database = {
  public: {
    Tables: {
      [key: string]: {
        Row: Record<string, any>;
        Insert: Record<string, any>;
        Update: Record<string, any>;
      };
    };
    Views: Record<string, any>;
    Functions: Record<string, any>;
    Enums: Record<string, any>;
    CompositeTypes: Record<string, any>;
  };
};
